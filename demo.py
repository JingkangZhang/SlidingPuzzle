import base64
myscript =''''''
eval(compile(base64.b64decode(myscript),'<string>','exec'))